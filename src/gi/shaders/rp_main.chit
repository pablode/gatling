#extension GL_GOOGLE_include_directive: require
#extension GL_EXT_ray_tracing: require
#extension GL_EXT_nonuniform_qualifier: enable
#extension GL_EXT_samplerless_texture_functions: require
#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#extension GL_EXT_shader_explicit_arithmetic_types_int16: require
#extension GL_EXT_nonuniform_qualifier: require
#extension GL_EXT_shader_explicit_arithmetic_types_int64: require
#extension GL_EXT_buffer_reference: require

#if SCENE_DATA_COUNT > 0
#include "mdl_renderer_state.glsl"
#define RENDERER_STATE_TYPE mdl_renderer_state
#endif
#include "mdl_types.glsl"
#include "rp_main_descriptors.glsl"

#include "mdl_interface.glsl"
#include "mdl_shading_state.glsl"
#include "rp_main_payload.glsl"

#pragma mdl_generated_code

layout(location = PAYLOAD_INDEX_SHADE) rayPayloadInEXT ShadeRayPayload rayPayload;

hitAttributeEXT vec2 baryCoord;

#ifdef NEXT_EVENT_ESTIMATION
void sampleLight(vec4 k4, vec3 surfacePos, out vec3 dirToLight, out float dist, out vec3 power, out float invPdf, out uint diffuseSpecularPacked)
{
    if ((k4.x * sceneParams.totalLightCount) <= sceneParams.sphereLightCount)
    {
        uint lightIndex = min(uint(k4.y * sceneParams.sphereLightCount), sceneParams.sphereLightCount - 1);

        SphereLight light = sphereLights[lightIndex];

        // TODO: sample solid angle of sphere light
        // https://schuttejoe.github.io/post/arealightsampling/
        vec3 samplePos = light.pos + sample_sphere(k4.zw, light.radiusXYZ);
        vec3 dir = samplePos - surfacePos;
        dist = length(dir);
        dirToLight = safe_div(dir, dist);

        // https://graphics.cg.uni-saarland.de/courses/ris-2021/slides/03_ProbabilityTheory_MonteCarlo.pdf s.35
        vec3 lightNormal = normalize(samplePos - light.pos);
        float cosTheta = max(0.0, dot(-dirToLight, lightNormal));
        invPdf = safe_div((light.area > 0.0) ? (light.area * cosTheta) : 1.0, dist * dist);

        power = light.baseEmission * PC.lightIntensityMultiplier;
        diffuseSpecularPacked = light.diffuseSpecularPacked;
    }
    else if ((k4.x * sceneParams.totalLightCount) <= (sceneParams.sphereLightCount + sceneParams.distantLightCount))
    {
        uint lightIndex = min(uint(k4.y * sceneParams.distantLightCount), sceneParams.distantLightCount - 1);

        DistantLight light = distantLights[lightIndex];

        dist = 100000.0;
        dirToLight = -light.direction;
        power = light.baseEmission * PC.lightIntensityMultiplier;
        invPdf = light.invPdf;
        diffuseSpecularPacked = light.diffuseSpecularPacked;

        if (light.angle > 0.0)
        {
            vec3 t1, t2;
            orthonormal_basis(dirToLight, t1, t2);

            // https://math.stackexchange.com/questions/56784/generate-a-random-direction-within-a-cone/182936#182936
            float phi = (k4.z * 2 * PI) - PI;
            float theta = k4.w * light.angle;
            dirToLight = normalize(sin(theta) * (cos(phi) * t1 + sin(phi) * t2) + cos(theta) * dirToLight);
        }
    }
    else if ((k4.x * sceneParams.totalLightCount) <= (sceneParams.sphereLightCount + sceneParams.distantLightCount + sceneParams.rectLightCount))
    {
        uint lightIndex = min(uint(k4.y * sceneParams.rectLightCount), sceneParams.rectLightCount - 1);

        RectLight light = rectLights[lightIndex];

        // TODO: solid angle sampling
        vec2 sampleOnRect = (k4.zw - vec2(0.5)) * vec2(light.width, light.height);

        vec3 t0 = decode_direction(light.tangentFramePacked.x);
        vec3 t1 = decode_direction(light.tangentFramePacked.y);
        vec3 samplePos = light.origin + sampleOnRect.x * t0 + sampleOnRect.y * t1;

        vec3 dir = samplePos - surfacePos;
        dist = length(dir);
        dirToLight = safe_div(dir, dist);

        vec3 lightNormal = cross(t1, t0); // light forward/default dir is -Z (like UsdLux)
        float cosTheta = max(0.0, dot(-dirToLight, lightNormal));
        float area = light.width * light.height;
        invPdf = safe_div((area > 0.0) ? (area * cosTheta) : 1.0, dist * dist);

        power = light.baseEmission * PC.lightIntensityMultiplier;
        diffuseSpecularPacked = light.diffuseSpecularPacked;
    }
    else
    {
        uint lightIndex = min(uint(k4.y * sceneParams.diskLightCount), sceneParams.diskLightCount - 1);

        DiskLight light = diskLights[lightIndex];
        vec2 radiusXY = vec2(light.radiusX, light.radiusY);

        vec2 sampleOnDisk = sample_disk(k4.zw, radiusXY);

        vec3 t0 = decode_direction(light.tangentFramePacked.x);
        vec3 t1 = decode_direction(light.tangentFramePacked.y);
        vec3 samplePos = light.origin + sampleOnDisk.x * t0 + sampleOnDisk.y * t1;

        vec3 dir = samplePos - surfacePos;
        dist = length(dir);
        dirToLight = safe_div(dir, dist);

        vec3 lightNormal = cross(t1, t0); // light forward/default dir is -Z (like UsdLux)
        float cosTheta = max(0.0, dot(-dirToLight, lightNormal));
        float area = radiusXY.x * radiusXY.y * PI;
        invPdf = safe_div((area > 0.0) ? (area * cosTheta) : 1.0, dist * dist);

        power = light.baseEmission * PC.lightIntensityMultiplier;
        diffuseSpecularPacked = light.diffuseSpecularPacked;
    }

    power *= exp2(PC.sensorExposure);
    invPdf *= float(sceneParams.totalLightCount);
}
#endif

void main()
{
    /* 1. Get hit info. */
    vec2 hit_bc = baryCoord;
    BlasPayload payload = blas_payloads[gl_InstanceCustomIndexEXT];
    bool isLeftHanded = ((payload.bitfield & BLAS_PAYLOAD_BITFLAG_FLIP_FACING) != 0);

    /* 2. Set up shading state. */
    State shading_state; // Shading_state_material
    bool isFrontFace;
    setup_mdl_shading_state(hit_bc, shading_state, isFrontFace);

    // we keep a copy of the normal here since it can be changed within the state by *_init() functions:
    // https://github.com/NVIDIA/MDL-SDK/blob/aa9642b2546ad7b6236b5627385d882c2ed83c5d/examples/mdl_sdk/dxr/content/mdl_hit_programs.hlsl#L411
    const vec3 normal = shading_state.normal;

    vec3 throughput = vec3(rayPayload.throughput);
    vec3 radiance = vec3(rayPayload.radiance);

    uint bounce = (rayPayload.bitfield & SHADE_RAY_PAYLOAD_BOUNCES_MASK);
    uint mediumIdx = shadeRayPayloadGetMediumIdx(rayPayload);

    bool thinWalled = false;
#ifdef IS_THIN_WALLED
    thinWalled = mdl_thin_walled(shading_state);
#endif

    if (bounce == 0)
    {
#if (AOV_MASK & AOV_BIT_OBJECT_ID) != 0 || (AOV_MASK & AOV_BIT_FACE_ID) != 0
      IndexBuffer indices = IndexBuffer(payload.bufferAddress);
      BlasPayloadBufferPreamble preamble = indices.preamble;
#endif
      uint imageWidth = PC.imageDims & 0xFFFFu;
      uint pixelIndex = gl_LaunchIDEXT.x + gl_LaunchIDEXT.y * imageWidth; // only for AOVs
#if (AOV_MASK & AOV_BIT_DEBUG_OPACITY) != 0
#ifndef HAS_CUTOUT_TRANSPARENCY
      OpacityAov[pixelIndex] = vec3(1.0, 0.0, 0.0); // Distinct from viridis heatmap set in any-hit shader
#else
      // Payload fields have been set in any-hit shader.
#endif
#endif
#if (AOV_MASK & AOV_BIT_NORMAL) != 0
      NormalsAov[pixelIndex] = (normal + vec3(1.0, 1.0, 1.0)) * 0.5;
#endif
#if (AOV_MASK & AOV_BIT_DEBUG_TANGENTS) != 0
      TangentsAov[pixelIndex] = (shading_state.tangent_u[0] + vec3(1.0, 1.0, 1.0)) * 0.5;
#endif
#if (AOV_MASK & AOV_BIT_DEBUG_BITANGENTS) != 0
      BitangentsAov[pixelIndex] = (shading_state.tangent_v[0] + vec3(1.0, 1.0, 1.0)) * 0.5;
#endif
#if (AOV_MASK & AOV_BIT_DEBUG_BARYCENTRICS) != 0
      BarycentricsAov[pixelIndex] = vec3(1.0 - hit_bc.x - hit_bc.y, hit_bc.x, hit_bc.y);
#endif
#if (AOV_MASK & AOV_BIT_DEBUG_TEXCOORDS) != 0
      TexcoordsAov[pixelIndex] = shading_state.text_coords[0];
#endif
#if (AOV_MASK & AOV_BIT_DEBUG_THIN_WALLED) != 0
      ThinWalledAov[pixelIndex] = thinWalled ? vec3(1.0, 0.0, 0.0) : vec3(0.0, 1.0, 0.0);
#endif
#if (AOV_MASK & AOV_BIT_OBJECT_ID) != 0
      int objectId = preamble.objectId;
      ObjectIdAov[pixelIndex] = objectId;
#endif
#if (AOV_MASK & AOV_BIT_DEPTH) != 0
      vec2 clipRange = unpackHalf2x16(PC.clipRangePacked);
      float logDepth = 2.0 * log(gl_HitTEXT / clipRange.x) / log(clipRange.y / clipRange.x) - 1.0;
      DepthAov[pixelIndex] = logDepth;
#endif
#if (AOV_MASK & AOV_BIT_FACE_ID) != 0
      int faceIdStride = int((preamble.faceIdsInfo & FACE_ID_STRIDE_MASK) >> FACE_ID_STRIDE_OFFSET);
      int invFaceIdStride = 4 / faceIdStride;

      uint faceIdsOffset = preamble.faceIdsInfo & FACE_ID_MASK;
      RawIntBuffer faceIdsBuffer = RawIntBuffer(payload.bufferAddress + faceIdsOffset);
      int encodedFaceId = faceIdsBuffer.data[gl_PrimitiveID / invFaceIdStride];

      encodedFaceId >>= ((gl_PrimitiveID % invFaceIdStride) * 8);
      FaceIdAov[pixelIndex] = encodedFaceId & (faceIdStride * 8 - 1);
#endif
#if (AOV_MASK & AOV_BIT_INSTANCE_ID) != 0
      int instanceId = InstanceIds[gl_InstanceID];
      InstanceIdAov[pixelIndex] = instanceId;
#endif
#if (AOV_MASK & AOV_BIT_TOPOHASH) != 0
      uint64_t topoHash = payload.topoHash;
      uint lower16Bit = uint(topoHash & 0xFFFFu);
      uvec3 colorI = uvec3(
        uint(topoHash >> 48) & 0xFFFFu,
        uint(topoHash >> 32) & 0xFFFFu,
        uint(topoHash >> 16) & 0xFFFFu
      ) ^ lower16Bit;
      TopoHashAov[pixelIndex] = vec3(colorI) / float(UINT16_MAX);
#endif
    }

    /* 3. Apply volume attenuation */
    vec3 prevMediumIor = vec3(1.0);
    vec3 nextMediumIor = vec3(1.0);

    if (mediumIdx > 0)
    {
        vec3 transmittance;
        float distance = gl_HitTEXT;

#if MEDIUM_STACK_SIZE == 0
        vec3 sigma_a = mdl_volume_absorption_coefficient(shading_state);

        transmittance = exp(-sigma_a * distance);
#else
        Medium m = rayPayload.media[mediumIdx - 1];

        prevMediumIor = m.ior;
        if (mediumIdx > 1)
        {
            nextMediumIor = rayPayload.media[mediumIdx - 2].ior;
        }

        transmittance = exp(-m.sigma_t * distance);
#endif

        throughput *= transmittance;
    }

    const vec3 iorCurrent = (isFrontFace || thinWalled) ? prevMediumIor : vec3(BSDF_USE_MATERIAL_IOR);
    const vec3 iorOther = (isFrontFace || thinWalled) ? vec3(BSDF_USE_MATERIAL_IOR) : nextMediumIor;

    /* 4. Add Emission */
#ifdef IS_EMISSIVE
    {
        shading_state.geom_normal *= (isLeftHanded ? -1.0 : 1.0); // account for geometry flip

        Edf_evaluate_data edf_evaluate_data;
        edf_evaluate_data.k1 = -gl_WorldRayDirectionEXT;
        edf_evaluate_data.pdf = 0.0;

        if (isFrontFace)
        {
            mdl_edf_emission_init(shading_state);
            mdl_edf_emission_evaluate(edf_evaluate_data, shading_state);
        }
        // MDL Spec: "There is no emission on the back-side unless an EDF is specified with the backface field and thin_walled is set to true."
#if defined(IS_THIN_WALLED) && defined(HAS_BACKFACE_EDF)
        else if (thinWalled)
        {
            mdl_backface_edf_emission_init(shading_state);
            mdl_backface_edf_emission_evaluate(edf_evaluate_data, shading_state);
        }
#endif

        if (edf_evaluate_data.pdf > 0.0)
        {
            vec3 emission_intensity = vec3(0.0);

            if (isFrontFace)
            {
                emission_intensity = mdl_edf_emission_intensity(shading_state);
            }
#if defined(IS_THIN_WALLED) && defined(HAS_BACKFACE_EDF)
            else if (thinWalled)
            {
                emission_intensity = mdl_backface_edf_emission_intensity(shading_state);
            }
#endif

            emission_intensity *= exp2(PC.sensorExposure);

            radiance += throughput * edf_evaluate_data.edf * emission_intensity;
        }

        shading_state.geom_normal *= (isLeftHanded ? -1.0 : 1.0);
    }
#endif

    // reassign normal, see declaration of variable.
    shading_state.normal = normal;

    // init once and share between *_evaluate and *_sample calls
#if defined(IS_THIN_WALLED) && defined(HAS_BACKFACE_BSDF)
    if (thinWalled && !isFrontFace)
    {
        mdl_backface_bsdf_scattering_init(shading_state);
    }
    else
#endif
    {
        mdl_bsdf_scattering_init(shading_state);
    }

    /* 5. BSDF importance sampling. */
    uint eventType;
    {
        Bsdf_sample_data bsdf_sample_data;
        bsdf_sample_data.ior1 = vec3(iorCurrent);
        bsdf_sample_data.ior2 = vec3(iorOther);
        bsdf_sample_data.k1 = -gl_WorldRayDirectionEXT;
#ifdef RAND_4D
        bsdf_sample_data.xi = rng4d_next4f(rayPayload.rng_state);
#else
        bsdf_sample_data.xi = rng1d_next4f(rayPayload.rng_state);
#endif

#if defined(IS_THIN_WALLED) && defined(HAS_BACKFACE_BSDF)
        if (thinWalled && !isFrontFace)
        {
            mdl_backface_bsdf_scattering_sample(bsdf_sample_data, shading_state);
        }
        else
#endif
        {
            mdl_bsdf_scattering_sample(bsdf_sample_data, shading_state);
        }

        eventType = bsdf_sample_data.event_type;

        throughput *= bsdf_sample_data.bsdf_over_pdf;

        rayPayload.ray_dir = bsdf_sample_data.k2;
    }

    bool isTransmissionEvent = (eventType & BSDF_EVENT_TRANSMISSION) != 0;

    /* 6. NEE light sampling */
#ifdef NEXT_EVENT_ESTIMATION
    if ((eventType & (BSDF_EVENT_DIFFUSE | BSDF_EVENT_GLOSSY)) != 0)
    {
        // reassign normal, see declaration of variable.
        shading_state.normal = normal;

        // Sample light source
#ifdef RAND_4D
        vec4 k4 = rng4d_next4f(rayPayload.rng_state);
#else
        vec4 k4 = rng1d_next4f(rayPayload.rng_state);
#endif

        vec3 dirToLight;
        float lightDist;
        vec3 lightPower;
        float invLightSamplePdf;
        uint diffuseSpecularPacked;
        sampleLight(k4, shading_state.position, dirToLight, lightDist, lightPower, invLightSamplePdf, diffuseSpecularPacked);

        vec3 neeContrib = vec3(0.0);
        bool neeValid = (lightDist > 0.0) && dot(dirToLight, shading_state.geom_normal) > 0.0;

        // Calc unshadowed light contribution
        if (neeValid)
        {
            Bsdf_evaluate_data bsdf_eval_data;
            bsdf_eval_data.ior1 = vec3(iorCurrent);
            bsdf_eval_data.ior2 = vec3(iorOther);
            bsdf_eval_data.k1 = -gl_WorldRayDirectionEXT;
            bsdf_eval_data.k2 = dirToLight;
            mdl_bsdf_scattering_evaluate(bsdf_eval_data, shading_state);

            neeValid = (bsdf_eval_data.pdf > 0.0);

            if (neeValid)
            {
                vec2 diffuseSpecular = unpackHalf2x16(diffuseSpecularPacked);

                vec3 neeRadiance = lightPower * invLightSamplePdf;

                vec3 weight = throughput * neeRadiance;
                neeContrib += weight * bsdf_eval_data.bsdf_diffuse * diffuseSpecular.x;
                neeContrib += weight * bsdf_eval_data.bsdf_glossy * diffuseSpecular.y;
            }
        }

        rayPayload.neeToLight = dirToLight * lightDist;
        rayPayload.neeContrib = neeContrib;
    }
#endif

    // Modify medium stack
    if (!thinWalled && isTransmissionEvent)
    {
#if MEDIUM_STACK_SIZE > 0
        if (isFrontFace) // push
        {
            mediumIdx++;

            if (mediumIdx <= MEDIUM_STACK_SIZE)
            {
                vec3 sigma_a = mdl_volume_absorption_coefficient(shading_state);
                vec3 sigma_s = mdl_volume_scattering_coefficient(shading_state);
                vec3 sigma_t = sigma_a + sigma_s;

                Medium m;
                m.ior = mdl_ior(shading_state);
                m.sigma_s = sigma_s;
                m.sigma_t = sigma_t;
                m.bias = MEDIUM_DIRECTIONAL_BIAS;
                rayPayload.media[mediumIdx - 1] = m;
            }
        }
        else if (mediumIdx > 0) // pop
        {
            mediumIdx--;
        }
#else
        mediumIdx = (1 - mediumIdx); // toggle between inside and outside
#endif

        // medium changed -> reset walk
        rayPayload.bitfield &= ~SHADE_RAY_PAYLOAD_WALK_MASK;

        shadeRayPayloadSetMediumIdx(rayPayload, mediumIdx);
    }

    // Update rest of path state
    if (eventType == BSDF_EVENT_ABSORB)
    {
        rayPayload.bitfield |= SHADE_RAY_PAYLOAD_TERMINATE_FLAG;
    }

    vec3 geomNormal = shading_state.geom_normal * (isTransmissionEvent ? -1.0 /* undo flip */ : 1.0);
    rayPayload.ray_origin = offset_ray_origin(shading_state.position, geomNormal);

    rayPayload.throughput = throughput;
    rayPayload.radiance = radiance;
}
