#extension GL_GOOGLE_include_directive: require
#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require

#include "interface/rp_oidn.h"

layout (local_size_x = WG_SIZE_X, local_size_y = WG_SIZE_Y) in;

layout(binding = 0, std430) readonly buffer InputBuffer { float16_t inPixels[]; };
#ifdef OP_COPY_CHANNELS
layout(binding = 1, std430) writeonly buffer OutputBuffer { float outPixels[]; };
#else
layout(binding = 1, std430) writeonly buffer OutputBuffer { float16_t outPixels[]; };
#endif
layout(binding = 2, std430) readonly buffer WeightBuffer { float16_t weights[]; };
layout(binding = 3, std430) readonly buffer BiasBuffer { float16_t biases[]; };

layout(push_constant) uniform PushConstantBlock { PushConstants PC; };

#define KERNEL_SIZE 3

void main()
{
  if (gl_GlobalInvocationID.x >= PC.imageWidth || gl_GlobalInvocationID.y >= PC.imageHeight)
    return;

  int inIdx = int(gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * PC.imageWidth) * IN_CHANNEL_COUNT;
  int outIdx = int(gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * PC.imageWidth) * OUT_CHANNEL_COUNT;

#if 0 // viz input channels
  //int channelOffset = 0; // 3 = normals, 6 = albedo
  //for (int i = 0; i < 3; i++)
  //  outPixels[outIdx + i] = inPixels[inIdx + channelOffset + i];
  //return;
#endif

#ifdef OP_UPSAMPLE
  if (gl_GlobalInvocationID.x >= (PC.imageWidth / 2) || gl_GlobalInvocationID.y >= (PC.imageHeight / 2))
    return;

  int outIdx0 = int(gl_GlobalInvocationID.x*2 + 0 + (gl_GlobalInvocationID.y*2 + 0) * PC.imageWidth) * OUT_CHANNEL_COUNT;
  int outIdx1 = int(gl_GlobalInvocationID.x*2 + 1 + (gl_GlobalInvocationID.y*2 + 0) * PC.imageWidth) * OUT_CHANNEL_COUNT;
  int outIdx2 = int(gl_GlobalInvocationID.x*2 + 0 + (gl_GlobalInvocationID.y*2 + 1) * PC.imageWidth) * OUT_CHANNEL_COUNT;
  int outIdx3 = int(gl_GlobalInvocationID.x*2 + 1 + (gl_GlobalInvocationID.y*2 + 1) * PC.imageWidth) * OUT_CHANNEL_COUNT;

  for (int i = 0; i < min(IN_CHANNEL_COUNT, OUT_CHANNEL_COUNT); i++)
  {
    outPixels[outIdx0 + i] = inPixels[inIdx + i];
    outPixels[outIdx1 + i] = inPixels[inIdx + i];
    outPixels[outIdx2 + i] = inPixels[inIdx + i];
    outPixels[outIdx3 + i] = inPixels[inIdx + i];
  }
#endif
#ifdef OP_MAX_POOL
  if (gl_GlobalInvocationID.x >= (PC.imageWidth / 2) || gl_GlobalInvocationID.y >= (PC.imageHeight / 2))
    return;

  int inIdx0 = int(gl_GlobalInvocationID.x*2+0 + (gl_GlobalInvocationID.y*2 + 0) * PC.imageWidth) * IN_CHANNEL_COUNT;
  int inIdx1 = int(gl_GlobalInvocationID.x*2+1 + (gl_GlobalInvocationID.y*2 + 0) * PC.imageWidth) * IN_CHANNEL_COUNT;
  int inIdx2 = int(gl_GlobalInvocationID.x*2+0 + (gl_GlobalInvocationID.y*2 + 1) * PC.imageWidth) * IN_CHANNEL_COUNT;
  int inIdx3 = int(gl_GlobalInvocationID.x*2+1 + (gl_GlobalInvocationID.y*2 + 1) * PC.imageWidth) * IN_CHANNEL_COUNT;

  for (int i = 0; i < min(IN_CHANNEL_COUNT, OUT_CHANNEL_COUNT); i++)
  {
    float16_t max1 = max(inPixels[inIdx0 + i], inPixels[inIdx1 + i]);
    float16_t max2 = max(inPixels[inIdx2 + i], inPixels[inIdx3 + i]);
    outPixels[outIdx + i] = max(max1, max2);
  }
#endif
#ifdef OP_CONVOLVE
  for (int k = 0; k < OUT_CHANNEL_COUNT; k++)
  {
    float result = 0.0;

    for (int i = 0; i < KERNEL_SIZE; i++)
    for (int j = 0; j < KERNEL_SIZE; j++)
    {
      ivec2 coord = ivec2(gl_GlobalInvocationID.xy) + ivec2(i, j) - ivec2(KERNEL_SIZE/2);
      coord.x = max(0, min(coord.x, int(PC.imageWidth) - 1));
      coord.y = max(0, min(coord.y, int(PC.imageHeight) - 1));

// TODO: might not be correct yet
      result += float(biases[PC.biasOffset + i + (j*KERNEL_SIZE)+ 1/*TODO:enable*/ * k * (KERNEL_SIZE*KERNEL_SIZE)]);

      for (int h = 0; h < IN_CHANNEL_COUNT; h++)
      {
        int inIndexIj = int(coord.x + coord.y * PC.imageWidth) * IN_CHANNEL_COUNT + h;

// TODO: might not be correct yet
float w = float(weights[PC.weightOffset + (k + i) * IN_CHANNEL_COUNT + j * IN_CHANNEL_COUNT + h]);

        //uint wbIdx = i + j * KERNEL_SIZE
        //             + (h * KERNEL_SIZE * KERNEL_SIZE )
        //             + (k * KERNEL_SIZE * KERNEL_SIZE * IN_CHANNEL_COUNT)
        //             ;
        //float w = float(weights[PC.weightOffset + wbIdx]);

        result += float(inPixels[inIndexIj]) * w;
      }
    }

    outPixels[outIdx + k] = float16_t(result);
  }
#endif
#ifdef OP_COPY_CHANNELS
  for (int i = 0; i < min(IN_CHANNEL_COUNT, OUT_CHANNEL_COUNT); i++)
  {
    outPixels[outIdx + i] = float(inPixels[inIdx + i]);
  }
#endif
}
