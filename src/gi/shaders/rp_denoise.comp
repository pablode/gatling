#extension GL_GOOGLE_include_directive: require
#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require

#include "interface/rp_oidn.h"

layout (local_size_x = WG_SIZE_X, local_size_y = WG_SIZE_Y) in;

layout(binding = 0, std430) readonly buffer InputBuffer { float16_t inPixels[]; };
#ifdef OP_COPY_CHANNELS
layout(binding = 1, std430) writeonly buffer OutputBuffer { float outPixels[]; };
#else
layout(binding = 1, std430) writeonly buffer OutputBuffer { float16_t outPixels[]; };
#endif
layout(binding = 2, std430) readonly buffer WeightBuffer { float weights[]; };
layout(binding = 3, std430) readonly buffer BiasBuffer { float biases[]; };
#ifdef OP_JOIN
layout(binding = 4, std430) readonly buffer InputBuffer2 { float16_t inPixels2[]; };
#endif

layout(push_constant) uniform PushConstantBlock { PushConstants PC; };

#ifdef OP_JOIN
shared float16_t channelCache[160/*max depth*/];
#endif

#define KERNEL_SIZE 3

void main()
{
  if (gl_GlobalInvocationID.x >= PC.imageWidth || gl_GlobalInvocationID.y >= PC.imageHeight)
    return;

  int pixelIdx = int(gl_GlobalInvocationID.y * PC.imageWidth + gl_GlobalInvocationID.x);

#if 0 // viz input channels
  //int channelOffset = 0; // 3 = normals, 6 = albedo
  //for (int i = 0; i < 3; i++)
  //  outPixels[outIdx + i] = inPixels[inIdx + channelOffset + i];
  //return;
#endif

#ifdef OP_UPSAMPLE
  if (gl_GlobalInvocationID.x >= PC.imageWidth || gl_GlobalInvocationID.y >= PC.imageHeight)
    return;

  uint outIdx0 = uint(gl_GlobalInvocationID.x*2 + 0 + (gl_GlobalInvocationID.y*2 + 0) * PC.imageWidth*2) * OUT_CHANNEL_COUNT;
  uint outIdx1 = uint(gl_GlobalInvocationID.x*2 + 1 + (gl_GlobalInvocationID.y*2 + 0) * PC.imageWidth*2) * OUT_CHANNEL_COUNT;
  uint outIdx2 = uint(gl_GlobalInvocationID.x*2 + 0 + (gl_GlobalInvocationID.y*2 + 1) * PC.imageWidth*2) * OUT_CHANNEL_COUNT;
  uint outIdx3 = uint(gl_GlobalInvocationID.x*2 + 1 + (gl_GlobalInvocationID.y*2 + 1) * PC.imageWidth*2) * OUT_CHANNEL_COUNT;

  for (int i = 0; i < min(IN_CHANNEL_COUNT, OUT_CHANNEL_COUNT); i++) // TODO: should be the same
  {
    float16_t f = inPixels[pixelIdx *IN_CHANNEL_COUNT+i];
    outPixels[outIdx0 + i] = f;
    outPixels[outIdx1 + i] = f;
    outPixels[outIdx2 + i] = f;
    outPixels[outIdx3 + i] = f;
  }
#endif
#ifdef OP_MAX_POOL
  if (gl_GlobalInvocationID.x >= PC.imageWidth || gl_GlobalInvocationID.y >= PC.imageHeight)
    return;

  uint inIdx0 = uint(gl_GlobalInvocationID.x*2+0 + (gl_GlobalInvocationID.y*2 + 0) * PC.imageWidth*2) * IN_CHANNEL_COUNT;
  uint inIdx1 = uint(gl_GlobalInvocationID.x*2+1 + (gl_GlobalInvocationID.y*2 + 0) * PC.imageWidth*2) * IN_CHANNEL_COUNT;
  uint inIdx2 = uint(gl_GlobalInvocationID.x*2+0 + (gl_GlobalInvocationID.y*2 + 1) * PC.imageWidth*2) * IN_CHANNEL_COUNT;
  uint inIdx3 = uint(gl_GlobalInvocationID.x*2+1 + (gl_GlobalInvocationID.y*2 + 1) * PC.imageWidth*2) * IN_CHANNEL_COUNT;
  int pIdx = int(gl_GlobalInvocationID.y * PC.imageWidth + gl_GlobalInvocationID.x);

  for (int i = 0; i < min(IN_CHANNEL_COUNT, OUT_CHANNEL_COUNT); i++)
  {
    float16_t max1 = max(inPixels[inIdx0 + i], inPixels[inIdx1 + i]);
    float16_t max2 = max(inPixels[inIdx2 + i], inPixels[inIdx3 + i]);
    outPixels[pIdx *OUT_CHANNEL_COUNT+i] = max(max1, max2);
  }
#endif
#ifdef OP_CONVOLVE
  if (gl_GlobalInvocationID.x >= PC.imageWidth || gl_GlobalInvocationID.y >= PC.imageHeight)
    return;

  for (int k = 0; k < OUT_CHANNEL_COUNT; k++) // TODO: rename -> oc
  {
    float result = 0.0;

    for (int i = 0; i < KERNEL_SIZE; i++)
    for (int j = 0; j < KERNEL_SIZE; j++)
    {
      ivec2 coord = ivec2(gl_GlobalInvocationID.xy) + ivec2(i, j) - ivec2(KERNEL_SIZE/2);
      coord.x = max(0, min(coord.x, int(PC.imageWidth) - 1));
      coord.y = max(0, min(coord.y, int(PC.imageHeight) - 1));

      int pIdx = int(coord.y * PC.imageWidth + coord.x);

      for (int h = 0; h < IN_CHANNEL_COUNT; h++) // TODO: rename -> ic
      {
        uint inIndexIj = pIdx * IN_CHANNEL_COUNT + h;

#if 1 // OIHW
uint weightIndex = (k * IN_CHANNEL_COUNT * 3 * 3) + (h * 3*3) + (j*3 + i);
#else // HWIO
uint weightIndex = (((j * 3 + i) * IN_CHANNEL_COUNT) + h) * OUT_CHANNEL_COUNT + k;
#endif

        float weight = float(weights[PC.weightOffset + weightIndex]);

        result += float(inPixels[inIndexIj]) * weight;
      }
    }

    result += float(biases[PC.biasOffset + k]);

    result = max(result, 0.0);//ReLU

    outPixels[pixelIdx * OUT_CHANNEL_COUNT + k] = float16_t(result);
  }
#endif
#ifdef OP_COPY_CHANNELS
  if (gl_GlobalInvocationID.x >= PC.imageWidth || gl_GlobalInvocationID.y >= PC.imageHeight)
    return;

  for (int i = 0; i < OUT_CHANNEL_COUNT; i++)
  {
    float f = (i < IN_CHANNEL_COUNT) ? float(inPixels[pixelIdx * IN_CHANNEL_COUNT + i]) : 0.0;
    outPixels[pixelIdx * OUT_CHANNEL_COUNT + i] = f;
  }
#endif
#ifdef OP_JOIN
  if (gl_GlobalInvocationID.x >= PC.imageWidth || gl_GlobalInvocationID.y >= PC.imageHeight)
    return;

  for (int i = 0; i < IN_CHANNEL_COUNT; i++)
  {
    channelCache[i] = inPixels[pixelIdx * IN_CHANNEL_COUNT + i];
  }
  for (int i = 0; i < OUT_CHANNEL_COUNT; i++)
  {
    channelCache[IN_CHANNEL_COUNT + i] = inPixels2[pixelIdx * OUT_CHANNEL_COUNT + i];
  }

  const uint RES_CHANNEL_COUNT = OUT_CHANNEL_COUNT + IN_CHANNEL_COUNT;

  for (int i = 0; i < RES_CHANNEL_COUNT; i++)
  {
    outPixels[pixelIdx * RES_CHANNEL_COUNT + i] = channelCache[i];
  }
#endif
}
