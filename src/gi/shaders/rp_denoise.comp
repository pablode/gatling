#extension GL_GOOGLE_include_directive: require
#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#extension GL_EXT_control_flow_attributes: require

#include "interface/rp_oidn.h"

layout (local_size_x = WG_SIZE_X, local_size_y = WG_SIZE_Y) in;

layout(binding = 0, std430) readonly buffer InputBuffer { float16_t inPixels[]; };
#ifdef OUT_CHANNEL_F32
layout(binding = 1, std430) writeonly buffer OutputBuffer { float outPixels[]; };
#else
layout(binding = 1, std430) writeonly buffer OutputBuffer { float16_t outPixels[]; };
#endif
layout(binding = 2, std430) readonly buffer TensorBuffer { float16_t tensors[]; };
#ifdef OP_CONCAT
layout(binding = 3, std430) readonly buffer InputBuffer2 { float16_t inPixels2[]; };
#endif

layout(push_constant) uniform PushConstantBlock { PushConstants PC; };

#define KERNEL_SIZE 3
#define KERNEL_SIZE_SQ (KERNEL_SIZE * KERNEL_SIZE)
#define KERNEL_BIAS (KERNEL_SIZE / 2)

#ifdef OP_CONVOLVE
shared float16_t sh_window[WG_SIZE_Y + 2][WG_SIZE_X + 2];
shared float16_t sh_results[WG_SIZE_Y][WG_SIZE_X][OUT_CHANNEL_COUNT];
#endif

void main()
{
  int pixelIdx = int(gl_GlobalInvocationID.y * PC.imageWidth + gl_GlobalInvocationID.x);

#ifdef OP_MAX_POOL
  if (gl_GlobalInvocationID.x >= PC.imageWidth || gl_GlobalInvocationID.y >= PC.imageHeight) return;

  uint inIdx0 = uint(gl_GlobalInvocationID.x*2+0 + (gl_GlobalInvocationID.y*2 + 0) * PC.imageWidth*2) * IN_CHANNEL_COUNT;
  uint inIdx1 = uint(gl_GlobalInvocationID.x*2+1 + (gl_GlobalInvocationID.y*2 + 0) * PC.imageWidth*2) * IN_CHANNEL_COUNT;
  uint inIdx2 = uint(gl_GlobalInvocationID.x*2+0 + (gl_GlobalInvocationID.y*2 + 1) * PC.imageWidth*2) * IN_CHANNEL_COUNT;
  uint inIdx3 = uint(gl_GlobalInvocationID.x*2+1 + (gl_GlobalInvocationID.y*2 + 1) * PC.imageWidth*2) * IN_CHANNEL_COUNT;

  for (int i = 0; i < OUT_CHANNEL_COUNT; i++) // same as IN_CHANNEL_COUNT
  {
    float16_t max1 = max(inPixels[inIdx0 + i], inPixels[inIdx1 + i]);
    float16_t max2 = max(inPixels[inIdx2 + i], inPixels[inIdx3 + i]);
    outPixels[pixelIdx * OUT_CHANNEL_COUNT + i] = max(max1, max2);
  }
#endif
#ifdef OP_CONVOLVE

  // shared mem v1
  ivec2 wgBase = ivec2(gl_WorkGroupID.xy) * ivec2(WG_SIZE_X, WG_SIZE_Y);

  for (uint oc = 0; oc < OUT_CHANNEL_COUNT; oc++)
    sh_results[gl_LocalInvocationID.y][gl_LocalInvocationID.x][oc] = float16_t(0.0);

  barrier();

  [[unroll]]
  for (uint ic = 0; ic < IN_CHANNEL_COUNT; ic++)
  {
    [[unroll]] for (int y = 0; y <= 1; y++)
    [[unroll]] for (int x = 0; x <= 1; x++)
    {
      int lx = int(gl_LocalInvocationID.x) + x * int(WG_SIZE_X);
      int ly = int(gl_LocalInvocationID.y) + y * int(WG_SIZE_Y);

      if (lx < int(WG_SIZE_X + 2) && ly < int(WG_SIZE_Y + 2))
      {
        ivec2 coord = wgBase + ivec2(lx - 1, ly - 1);
        coord = clamp(coord, ivec2(0), ivec2(PC.imageWidth - 1, PC.imageHeight - 1));
        uint inPixelIdx = uint(coord.y * PC.imageWidth + coord.x) * IN_CHANNEL_COUNT + ic;

        sh_window[ly][lx] = inPixels[inPixelIdx];
      }
    }

    barrier();

    [[unroll]]
    for (uint oc = 0; oc < OUT_CHANNEL_COUNT; oc++)
    {
      uint weightIndexOffset = (oc * IN_CHANNEL_COUNT * KERNEL_SIZE_SQ) + (ic * KERNEL_SIZE_SQ); // OIHW

      float16_t result = float16_t(0.0);

      [[unroll]] for (uint j = 0; j < KERNEL_SIZE; j++)
      [[unroll]] for (uint i = 0; i < KERNEL_SIZE; i++)
      {
        ivec2 lCoord = ivec2(gl_LocalInvocationID.xy) + ivec2(i, j);

        uint weightIndex = weightIndexOffset + (j * KERNEL_SIZE + i);
        float16_t weight = tensors[PC.weightOffset + weightIndex];

        result += sh_window[lCoord.y][lCoord.x] * weight;
      }

      sh_results[gl_LocalInvocationID.y][gl_LocalInvocationID.x][oc] += result;

      barrier(); // TODO: artifacts without. why?
    }
  }

  if (gl_GlobalInvocationID.x >= PC.imageWidth || gl_GlobalInvocationID.y >= PC.imageHeight)
    return;

#ifdef OP_UPSAMPLE
  uint outIdx0 = uint(gl_GlobalInvocationID.x * 2 + 0 + (gl_GlobalInvocationID.y * 2 + 0) * PC.imageWidth * 2) * OUT_CHANNEL_COUNT;
  uint outIdx1 = uint(gl_GlobalInvocationID.x * 2 + 1 + (gl_GlobalInvocationID.y * 2 + 0) * PC.imageWidth * 2) * OUT_CHANNEL_COUNT;
  uint outIdx2 = uint(gl_GlobalInvocationID.x * 2 + 0 + (gl_GlobalInvocationID.y * 2 + 1) * PC.imageWidth * 2) * OUT_CHANNEL_COUNT;
  uint outIdx3 = uint(gl_GlobalInvocationID.x * 2 + 1 + (gl_GlobalInvocationID.y * 2 + 1) * PC.imageWidth * 2) * OUT_CHANNEL_COUNT;
#endif

  for (uint oc = 0; oc < OUT_CHANNEL_COUNT; oc++)
  {
    float16_t result = sh_results[gl_LocalInvocationID.y][gl_LocalInvocationID.x][oc];

    result += tensors[PC.biasOffset + oc];

    result = max(result, float16_t(0.0)); // ReLU activation

#ifdef OUT_CHANNEL_F32
    float convertedResult = float(result);
#else
    float16_t convertedResult = result;
#endif

#ifdef OP_UPSAMPLE
    outPixels[outIdx0 + oc] = convertedResult;
    outPixels[outIdx1 + oc] = convertedResult;
    outPixels[outIdx2 + oc] = convertedResult;
    outPixels[outIdx3 + oc] = convertedResult;
#else
    outPixels[pixelIdx * OUT_CHANNEL_COUNT + oc] = convertedResult;
#endif
  }

#endif
#ifdef OP_CONCAT
  if (gl_GlobalInvocationID.x >= PC.imageWidth || gl_GlobalInvocationID.y >= PC.imageHeight) return;

  const uint RES_CHANNEL_COUNT = OUT_CHANNEL_COUNT + IN_CHANNEL_COUNT;

  for (int i = 0; i < IN_CHANNEL_COUNT; i++)
  {
    outPixels[pixelIdx * RES_CHANNEL_COUNT + i] = inPixels[pixelIdx * IN_CHANNEL_COUNT + i];
  }
  for (int i = 0; i < OUT_CHANNEL_COUNT; i++)
  {
    outPixels[pixelIdx * RES_CHANNEL_COUNT + IN_CHANNEL_COUNT + i] = inPixels2[pixelIdx * OUT_CHANNEL_COUNT + i];
  }
#endif
}
