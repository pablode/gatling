name: Build gatling

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
      build-config:
        required: true
        type: string
      # Must match CI installation path (see USD issue #1025)
      usd-download-url:
        required: true
        type: string
      usd-install-path:
        required: true
        type: string
      upload-install-artifacts:
        required: false
        type: boolean
        default: false
      archive-name:
        required: true
        type: string
      mdl-sdk-cache-key:
        required: true
        type: string
      cmake-params:
        required: false
        type: string
      houdini-packaging:
        required: false
        type: boolean
        default: false
      run-graphical-tests:
        required: false
        type: boolean
        default: false
      upload-test-artifacts:
        required: false
        type: boolean
        default: false
      executable-suffix:
        required: false
        type: string
        default: ''

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build gatling
    runs-on: ${{ inputs.image }}

    steps:
    - name: Check out repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        lfs: true

    - name: Install libgl1 package
      if: runner.os == 'Linux'
      # There seems to be a transitive dependency on libGL (perhaps by hgi)
      run: sudo apt-get update && sudo apt-get install libgl1-mesa-dev

    - name: Install Mesa & Vulkan packages
      if: ${{ runner.os == 'Linux' && inputs.run-graphical-tests }}
      run: |
        sudo add-apt-repository ppa:kisak/turtle
        sudo apt update
        sudo apt upgrade
        sudo apt-get install mesa-utils xvfb qtbase5-dev libgl1-mesa-dev libvulkan-dev vulkan-tools mesa-vulkan-drivers

    - name: Set up graphical environment variables
      if: ${{ runner.os == 'Linux' && inputs.run-graphical-tests }}
      run: |
        echo "LD_LIBRARY_PATH=${{ inputs.usd-install-path }}/lib" >> $GITHUB_ENV
        echo "DISPLAY=:1" >> $GITHUB_ENV
        echo "LIBGL_ALWAYS_SOFTWARE=1" >> $GITHUB_ENV
        echo "GALLIUM_DRIVER=llvmpipe" >> $GITHUB_ENV

    - name: Start virtual framebuffer
      if: ${{ runner.os == 'Linux' && inputs.run-graphical-tests }}
      run: |
        Xvfb :1 -screen 0 1280x960x24 &

    - name: Test vulkaninfo
      if: ${{ runner.os == 'Linux' && inputs.run-graphical-tests }}
      run: vulkaninfo

    - name: Fetch USD binaries
      run: curl ${{ inputs.usd-download-url }} -L -v -o USD.tar.gz

    - name: Unpack USD binaries
      run: mkdir -p ${{ inputs.usd-install-path }} && tar -xvf USD.tar.gz -C ${{ inputs.usd-install-path }}

    # We need to put the USD libs in the PATH because we build against USD's MaterialX distribution.
    - name: Set up USD environment variables
      if: runner.os == 'Windows'
      run: |
        echo "${{ inputs.usd-install-path }}/lib" >> $GITHUB_PATH
        echo "${{ inputs.usd-install-path }}/bin" >> $GITHUB_PATH

    - name: Set up USD environment variables
      if: runner.os == 'Linux'
      run: echo "LD_LIBRARY_PATH=${{ inputs.usd-install-path }}/lib" >> $GITHUB_ENV

    - name: Create temporary folders
      run: mkdir BUILD INSTALL

    - name: Restore MDL SDK
      id: restore-mdl-sdk
      uses: actions/cache/restore@v4
      with:
        path: MDL-SDK
        key: ${{ inputs.mdl-sdk-cache-key }}
        fail-on-cache-miss: true

    - name: Install NASM
      if: runner.os == 'Windows'
      uses: ilammy/setup-nasm@v1.4.0

    - name: Generate build system files using CMake
      working-directory: BUILD
      run: |
        cmake .. \
          -DUSD_ROOT=${{ inputs.usd-install-path }} \
          -DMDL_ROOT=../MDL-SDK \
          -DCMAKE_BUILD_TYPE=${{ inputs.build-config }} \
          -DCMAKE_INSTALL_PREFIX="$PWD/../INSTALL" \
          ${{ inputs.cmake-params }}

    - name: Build gatling
      working-directory: BUILD
      run: cmake --build . --config ${{ inputs.build-config }} -j 2 --target hdGatling gatling imgio_test

    - name: Build hdGatling_test
      working-directory: BUILD
      if: inputs.run-graphical-tests
      run: cmake --build . --config ${{ inputs.build-config }} -j 2 --target hdGatling_test

    - name: Run imgio_test
      working-directory: BUILD
      run: ./bin/imgio_test${{ inputs.executable-suffix }}

    - name: Run hdGatling_test
      working-directory: BUILD
      if: inputs.run-graphical-tests
      run: ./bin/hdGatling_test${{ inputs.executable-suffix }}

    - name: Install gatling
      working-directory: BUILD
      run: cmake --install . --config ${{ inputs.build-config }} --component hdGatling

    - name: Package for Houdini
      if: inputs.houdini-packaging
      working-directory: INSTALL
      run: |
        mkdir -p dso/usd
        mkdir -p dso/usd_plugins
        mkdir -p soho/parameters
        cp ../dist/houdini/UsdRenderers.json .
        cp ../dist/houdini/HdGatlingRendererPlugin_Viewport.ds soho/parameters/
        cp ../dist/houdini/plugInfo.json dso/usd_plugins/
        mv hdGatling dso/usd_plugins
        mv hdGatling* dso/usd

    - name: Upload test artifacts
      if: ${{ inputs.run-graphical-tests && inputs.upload-test-artifacts && failure() }}
      uses: actions/upload-artifact@v4
      with:
        name: test-artifacts-${{ runner.os }}
        path: TEST/*
        retention-days: 7

    - name: Create install artifacts
      if: inputs.upload-install-artifacts
      working-directory: INSTALL
      run: tar -zcvf ${{ inputs.archive-name }}.tar.gz *

    - name: Upload archive
      if: inputs.upload-install-artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.archive-name }}
        path: INSTALL/${{ inputs.archive-name }}.tar.gz
        retention-days: 7
